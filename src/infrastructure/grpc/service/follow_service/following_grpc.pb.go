// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package follow_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowServiceClient is the client API for FollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowServiceClient interface {
	SendUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (FollowService_SendUsersClient, error)
}

type followServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowServiceClient(cc grpc.ClientConnInterface) FollowServiceClient {
	return &followServiceClient{cc}
}

func (c *followServiceClient) SendUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (FollowService_SendUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FollowService_ServiceDesc.Streams[0], "/FollowService/SendUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &followServiceSendUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FollowService_SendUsersClient interface {
	Recv() (*Follower, error)
	grpc.ClientStream
}

type followServiceSendUsersClient struct {
	grpc.ClientStream
}

func (x *followServiceSendUsersClient) Recv() (*Follower, error) {
	m := new(Follower)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FollowServiceServer is the server API for FollowService service.
// All implementations must embed UnimplementedFollowServiceServer
// for forward compatibility
type FollowServiceServer interface {
	SendUsers(*User, FollowService_SendUsersServer) error
	mustEmbedUnimplementedFollowServiceServer()
}

// UnimplementedFollowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowServiceServer struct {
}

func (UnimplementedFollowServiceServer) SendUsers(*User, FollowService_SendUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method SendUsers not implemented")
}
func (UnimplementedFollowServiceServer) mustEmbedUnimplementedFollowServiceServer() {}

// UnsafeFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServiceServer will
// result in compilation errors.
type UnsafeFollowServiceServer interface {
	mustEmbedUnimplementedFollowServiceServer()
}

func RegisterFollowServiceServer(s grpc.ServiceRegistrar, srv FollowServiceServer) {
	s.RegisterService(&FollowService_ServiceDesc, srv)
}

func _FollowService_SendUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FollowServiceServer).SendUsers(m, &followServiceSendUsersServer{stream})
}

type FollowService_SendUsersServer interface {
	Send(*Follower) error
	grpc.ServerStream
}

type followServiceSendUsersServer struct {
	grpc.ServerStream
}

func (x *followServiceSendUsersServer) Send(m *Follower) error {
	return x.ServerStream.SendMsg(m)
}

// FollowService_ServiceDesc is the grpc.ServiceDesc for FollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowService",
	HandlerType: (*FollowServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendUsers",
			Handler:       _FollowService_SendUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "following.proto",
}
